#!/usr/bin/env python

import sys
import subprocess
import os
import atexit
import resource
import getopt
import signal

from time import sleep
from tempfile import mkdtemp

class Timeout(Exception):
    pass

def start_timeout(sec):
    def alarm_handler(signum, data):
        raise Timeout

    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(sec)

def stop_timeout():
    # turn of timeout
    signal.signal(signal.SIGALRM, signal.SIG_DFL)
    signal.alarm(0)

def run_symbiotic(symbiotic_location, benchmark, timeout = 0, _debug = False,
                  slce = True, old_slicer = False, prp = None, arch = None, klee_params = None):
    cmd = ['{0}/symbiotic'.format(symbiotic_location)]
    if _debug:
        cmd.append('--debug=slicer')
    cmd.append('--sv-comp')

    if not prp is None:
       cmd.append('--prp={0}'.format(os.path.expanduser(prp)))

    if not slce:
        cmd.append('--no-slice')

    if arch == '64bit':
        cmd.append('--64')

    if timeout != 0:
        cmd.append('--timeout={0}'.format(timeout))

    if old_slicer:
        cmd.append('--old-slicer')

    cmd.append(benchmark)

    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    return p

def verify_error_path(tmpdir, benchmark, prpfile, symbiotic_dir):
    benchabs = os.path.abspath(benchmark)
    cmd = ['{0}/verify_path.sh '
           '{1}/{2}.graphml {3} {4}'.format(symbiotic_dir,
                                            os.path.dirname(benchabs),
                                            os.path.basename(benchmark),
                                            os.path.abspath(prpfile), benchabs)]

    p = subprocess.Popen(cmd, shell=True,
                         stderr=subprocess.STDOUT, stdout=subprocess.PIPE)

    print('=== WITNESS')
    start_timeout(90)
    try:
        out, err = p.communicate();
        print(out)
    except Timeout:
        print('timeout')
    finally:
        stop_timeout()
        sys.stdout.flush()

def printTimeConsumed():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    usr = getattr(us, 'ru_utime')
    syst = getattr(us, 'ru_stime')

    print('=== TIME CONSUMED')
    print(usr + syst)
    sys.stdout.flush()


def printMemoryUsage():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    maxrss = getattr(us, 'ru_maxrss')

    print('=== MEMORY USAGE')
    print(maxrss / 1024.0)
    sys.stdout.flush()

def printVersions(symbiotic_dir):
    version = ''

    f = open(os.path.join(symbiotic_dir, 'SYMBIOTIC_VERSION'), 'r')
    version += 'symb:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'LLVM_NEW_SLICER_VERSION'), 'r')
    version += '-slicer:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'SVC_SCRIPTS_VERSION'), 'r')
    version += '-scripts:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'KLEE_VERSION'), 'r')
    version += '-klee:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'MINISAT_VERSION'), 'r')
    version += '-minisat:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'STP_VERSION'), 'r')
    version += '-stp:{0}'.format(f.readline().strip())
    f.close()

    print('=== VERSIONS')
    print(version)

def parse_args():
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', ['timeout=',
                                                      'debug', 'no-slice',
                                                      '64', 'prp=', 'old-slicer',
                                                      'klee-params='])
    except getopt.GetoptError as e:
        print('{0}'.format(str(e)))
        sys.exit(1)

    debug = False
    timeout=0
    slce = True
    old_slicer = False
    arch = None
    prp = None
    klee_params = None

    for opt, arg in opts:
        if opt == '--debug':
            debug = True
        elif opt == '--timeout':
            timeout = int(arg)
        elif opt == '--no-slice':
            slce = False
        elif opt == '--64':
            arch = '64bit'
        elif opt == '--old-slicer':
            old_slicer = True
        elif opt == '--prp':
            prp = arg
        elif opt == '--klee-params':
            print('NOT IMPLEMENTED')
            sys.exit(1)
            klee_params = arg

    return (args, timeout, debug, slce, old_slicer, prp, arch, klee_params)

def rmrf_tmp_dir(d):
    return os.system('rm -rf {0}'.format(d))

def copy_source_to_tmp(src):
    # create temporary directory and copy sources there
    tmpdir = mkdtemp(prefix='symbiotic.', dir='.')
    basename = os.path.basename(src)

    if os.system('cp {0} {1}/{2}'.format(src, tmpdir, basename)) != 0:
        # cp already gave error message
        rmrf_tmp_dir(tmpdir)
        print('=== RESULT')
        print('ERROR')
        sys.exit(1)

    return (tmpdir, '{0}/{1}'.format(tmpdir, basename))

def say_result(res):
    print(res)
    return res

if __name__ == "__main__":

    pths, timeout, debug, slce, old_slicer, prp, arch, klee_params = parse_args()
    if len(pths) == 2:
        symbiotic_dir = pths[0]
        benchmark = pths[1]
    else:
        print('=== RESULT')
        print('ERROR')
        print('Usage: run_benchmark [--timeout=n] [--debug] [--no-slice]'
              '[--prp=property_file] [--64] [--klee-params=p] symbiotic_dir benchmark')
        sys.exit(1)

    printVersions(symbiotic_dir)

    tmpdir, src = copy_source_to_tmp(benchmark)
    if prp is None:
        prp = '{0}/ALL.prp'.format(os.path.dirname(benchmark))

    print('=== RESULT')
    sys.stdout.flush()

    p = run_symbiotic(symbiotic_dir, src, timeout, debug,
                      slce, old_slicer, prp, arch, klee_params)
    out, err = p.communicate()

    result = None
    if p.returncode != 0:
        result = say_result('ERROR')
    else:
        if not out is None:
            for line in iter(out.splitlines()):
                if line == 'FALSE':
                    result = say_result(line)
                else:
                    print(line)
                sys.stdout.flush()
        else:
            result = say_result('ERROR')

    sys.stdout.flush()

    if result == 'FALSE':
        verify_error_path(tmpdir, src, prp, symbiotic_dir)

    printTimeConsumed()
    printMemoryUsage()
    rmrf_tmp_dir(tmpdir)

