#!/usr/bin/env python
#
# This script distributes task between computers. The task
# is to be run the Symbiotic tool on given benchark.
#
# Copyright (c) 2014 Marek Chalupa
# E-mail: statica@fi.muni.cz
#
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both that copyright
# notice and this permission notice appear in supporting documentation, and
# that the name of the copyright holders not be used in advertising or
# publicity pertaining to distribution of the software without specific,
# written prior permission. The copyright holders make no representations
# about the suitability of this software for any purpose. It is provided "as
# is" without express or implied warranty.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
# EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
# DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.
#
# On arran we have only python2, so use python2

from sys import argv, exit
from os import chdir
from os.path import dirname
from subprocess import Popen, PIPE
from time import strftime

from common import err, dbg, create_lockfile, colored, LOCKFILE
from dispatcher import Dispatcher
from sync import do_sync
from configs import parse_configs, parse_command_line, usage, configs
from tasks import get_machines, get_benchmarks, git_checkout
from log import satt_log, satt_log_init

def remove_down_machines(tasks):
    any_up = False
    procs = list()
    # run it parallely
    try:
        for t in tasks:
            p = Popen(['ping', '-c', '1', t.getMachine()],
                      stdout=PIPE, stderr=PIPE, bufsize=1024)
            procs.append((p, t))

        for p, t in procs:
            sout, serr = p.communicate()
            if serr:
                err(serr)

            if p.returncode != 0:
                satt_log(colored('WARN: {0} is down'.format(t.getMachine()), 'red'))
                tasks.remove(t)
            else:
                dbg('{0} is up'.format(t.getMachine()))
                any_up = True
    except KeyboardInterrupt:
        # pings will be killed as childs of this process
        exit(0)

    return any_up

def start_log():
    tm = strftime('%y-%m-%d-%H-%M-%s')
    lf = '{0}.{1}.log'.format(configs['tool'], tm)

    satt_log_init(lf)
    satt_log('Starting satt on {0}'.format(tm))

if __name__ == "__main__":
    # change working directory to the one with scripts
    working_dir = dirname(argv[0])
    chdir(working_dir)

    if not create_lockfile():
        global LOCKFILE
        err('Another instance of satt is running. If this is not true,'
            ' remove {0}'.format(LOCKFILE))

    tool = parse_command_line()
    # if user gave benchmarks to run on command line,
    # then he will probably wait for results, so do not
    # send an e-mail
    if configs.has_key('benchmarks') or configs['send-email'] == 'no':
        send_email = False
    else:
        send_email = True

    configs = parse_configs('{0}/config'.format(tool))

    # options from command line are of higher priority
    # so rewrite the options from parse_configs()
    # XXX do it in some better way, this is a fast workaround
    parse_command_line()

    # must be called here, when we know the name of the tool
    start_log()

    # we need at least machines and dir now
    if not configs.has_key('machines'):
        usage()
        err('Need file with machines!')
    if not configs.has_key('benchmarks'):
        usage()
        err('Need directory or files with benchmarks sets!')

    tasks = get_machines()
    if not remove_down_machines(tasks):
        err('No remote host is up, exiting...')
    do_sync(tasks)

    # checkout benchmarks to the right revision
    if not git_checkout(configs['benchmarks'], configs['year']):
        err('Failed checkout benchmarks to the right revision')

    try:
        num = get_benchmarks(configs['benchmarks'], tasks)
    except KeyboardInterrupt:
        satt_log('Stopping...')

    if num == 0 or num is None:
        err('No benchmarks queued for running'
            ', is the path to the benchmarks alright?')
    else:
        satt_log('Got {0} benchmarks to run'.format(num))

    satt_log('\o/ Let the show begin! \o/')
    dispatcher = Dispatcher(tasks)

    # run the benchmarks
    dispatcher.run()

    # notify user about the results via e-mail
    if send_email:
        dispatcher.sendResults()
