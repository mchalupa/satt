#!/usr/bin/env python
#
# This script distributes task between computers. The task
# is to be run the Symbiotic tool on given benchark.
#
# Copyright (c) 2014 Marek Chalupa
# E-mail: statica@fi.muni.cz
#
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both that copyright
# notice and this permission notice appear in supporting documentation, and
# that the name of the copyright holders not be used in advertising or
# publicity pertaining to distribution of the software without specific,
# written prior permission. The copyright holders make no representations
# about the suitability of this software for any purpose. It is provided "as
# is" without express or implied warranty.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
# EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
# DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.
#
# On arran we have only python2, so use python2

from common import err, create_lockfile
from dispatcher import Dispatcher
from sync import do_sync
from configs import parse_configs, parse_command_line, usage
from tasks import get_machines, get_benchmarks

if __name__ == "__main__":
    if not create_lockfile():
        err('Another instance of satt is running')

    configs = parse_configs()
    # command line has higher priority
    parse_command_line()

    # we need at least machines and dir now
    if not configs.has_key('machines'):
        usage()
        err('\nERROR: Need file with machines!')
    if not configs.has_key('benchmarks'):
        usage()
        err('\nERROR: Need directory or files with benchmarks sets!')

    tasks = get_machines()
    do_sync(tasks)

    try:
        get_benchmarks(configs['benchmarks'], tasks)
    except KeyboardInterrupt:
        print('Stopping...')

    # TODO do it more efficiently...
    can_run = False
    for t in tasks:
        if t.getCount() > 0:
            can_run = True
            break;

    if not can_run:
        err('No benchmarks queued for running'
            ', is the path to the benchmarks alright?')

    dispatcher = Dispatcher(tasks)
    dispatcher.run()
