#!/usr/bin/env python

import sys
import subprocess
import signal
import os
import atexit
import resource
import getopt

from time import sleep
from tempfile import mkdtemp

class Timeout(Exception):
    pass

def start_timeout(sec):
    def alarm_handler(signum, data):
        raise Timeout

    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(sec)

def stop_timeout():
    # turn of timeout
    signal.signal(signal.SIGALRM, signal.SIG_DFL)
    signal.alarm(0)

def set_environ(_debug = False, _slce = True):
    def env_prepend(env, what):
        s = '{0}:{1}'.format(what, os.environ[env])
        os.environ[env] = s

    if _debug:
        os.environ['DEBUG'] = '1'

    if slce:
        os.environ['SLICE'] = '1'
    else:
        os.environ['SLICE'] = '0'

def run_symbiotic(symbiotic_location, benchmark, _debug = False,
                  slce = True, prp = None, arch = None):
    set_environ(_debug, slce)

    cmd = ['{0}/runme'.format(symbiotic_location)]
    if not prp is None:
        cmd.append('-p')
        cmd.append(os.path.expanduser(prp))
    if arch == '64bit':
        cmd.append('-6')

    cmd.append(benchmark)

    p = subprocess.Popen(cmd)
    return p

def printTimeConsumed():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    usr = getattr(us, 'ru_utime')
    syst = getattr(us, 'ru_stime')

    print('=== TIME CONSUMED')
    print(usr + syst)
    sys.stdout.flush()


def printMemoryUsage():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    maxrss = getattr(us, 'ru_maxrss')

    print('=== MEMORY USAGE')
    print(maxrss / 1024.0)
    sys.stdout.flush()

def printVersions(symbiotic_dir):
    version = ''
    f = open(os.path.join(symbiotic_dir, 'LLVM_SLICER_VERSION'), 'r')
    version += 'slicer:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'SVC_SCRIPTS_VERSION'), 'r')
    version += '-scripts:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'KLEE_VERSION'), 'r')
    version += '-klee:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'STP_VERSION'), 'r')
    version += '-stp:{0}'.format(f.readline().strip())
    f.close()

    print('=== VERSIONS')
    print(version)

def parse_args():
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', ['timeout=',
                                                      'debug', 'no-slice',
                                                      '64', 'prp='])
    except getopt.GetoptError as e:
        print('{0}'.format(str(e)))
        sys.exit(1)

    debug = False
    timeout=0
    slce = True
    arch = None
    prp = None

    for opt, arg in opts:
        if opt == '--debug':
            debug = True
        elif opt == '--timeout':
            timeout = int(arg)
        elif opt == '--no-slice':
            slce = False
        elif opt == '--64':
            arch = '64bit'
        elif opt == '--prp':
            prp = arg

    return (args, timeout, debug, slce, prp, arch)

def rmrf_tmp_dir(d):
    return os.system('rm -rf {0}'.format(d))

def copy_source_to_tmp(src):
    # create temporary directory and copy sources there
    tmpdir = mkdtemp(prefix='symbiotic.', dir='.')
    basename = os.path.basename(src)

    if os.system('cp {0} {1}/{2}'.format(src, tmpdir, basename)) != 0:
        # cp already gave error message
        rmrf_tmp_dir(tmpdir)
        print('=== RESULT')
        print('ERROR')
        sys.exit(1)

    return (tmpdir, '{0}/{1}'.format(tmpdir, basename))

def signal_childs(sig):
    signal.signal(sig, signal.SIG_IGN)
    os.kill(0, sig)
    signal.signal(sig, signal.SIG_DFL)

def sigpipe_handler(signum, data):
    signal_childs(signal.SIGINT)
    signal_childs(signal.SIGINT)
    signal_childs(signal.SIGKILL)

if __name__ == "__main__":

    pths, timeout, debug, slce, prp, arch = parse_args()
    if len(pths) == 2:
        symbiotic_dir = pths[0]
        benchmark = pths[1]
    else:
        print('=== RESULT')
        print('ERROR')
        print('Usage: run_benchmark [--timeout=n] [--debug] [--no-slice]'
              '[--prp=property_file] [--64] symbiotic_dir benchmark')
        sys.exit(1)

    printVersions(symbiotic_dir)

    tmpdir, src = copy_source_to_tmp(benchmark)

    signal.signal(signal.SIGPIPE, sigpipe_handler)
    start_timeout(timeout)

    print('=== RESULT')
    sys.stdout.flush()

    try:
        p = run_symbiotic(symbiotic_dir, src, debug, slce, prp, arch)
        (out, err) = p.communicate()
        stop_timeout()

        if p.returncode != 0:
            print('ERROR')

        # these should be None ...
        if not out is None:
            print(out)
        if not err is None:
            print(err)

        sys.stdout.flush()
    except Timeout:
        print('TIMEOUT')
        sys.stdout.flush()
    finally:
        stop_timeout()

        printTimeConsumed()
        printMemoryUsage()

        # use sigint twice, klee sometimes needs it
        signal_childs(signal.SIGINT)
        signal_childs(signal.SIGINT)

        signal_childs(signal.SIGTERM)

        # wait a while untill klee is killed if it is hanging
        trials = 0
        notdone = 1
        while notdone != 0 and trials < 20:
            trials += 1
            print('waiting for childs termination ({0}) ...'.format(trials))

            sleep(1)
            notdone = rmrf_tmp_dir(tmpdir)

        print('sending SIGKILL')
        os.kill(0, signal.SIGKILL)

