#!/usr/bin/env python

import sys
import subprocess
import signal
import os
import atexit
import resource
import getopt

from time import sleep
from tempfile import mkdtemp

class Timeout(Exception):
    pass

def start_timeout(sec):
    def alarm_handler(signum, data):
        raise Timeout

    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(sec)

def set_environ(_debug = False, _slce = True):
    def env_prepend(env, what):
        s = '{0}:{1}'.format(what, os.environ[env])
        os.environ[env] = s

    if _debug:
        os.environ['DEBUG'] = '1'

    if slce:
        os.environ['SLICE'] = '1'

def run_symbiotic(symbiotic_location, benchmark, _debug = False, slce = True):
    set_environ(_debug, slce)

    path = os.path.dirname(sys.argv[0])
    p = subprocess.Popen(['{0}/runme'.format(symbiotic_location), benchmark])
    return p

def printTimeConsumed():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    usr = getattr(us, 'ru_utime')
    syst = getattr(us, 'ru_stime')

    print('=== TIME CONSUMED')
    print(usr + syst)
    sys.stdout.flush()


def printMemoryUsage():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    maxrss = getattr(us, 'ru_maxrss')

    print('=== MEMORY USAGE')
    print(maxrss / 1024.0)
    sys.stdout.flush()

def printVersions(symbiotic_dir):
    version = ''
    f = open(os.path.join(symbiotic_dir, 'LLVM_SLICER_VERSION'), 'r')
    version += 'slicer:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'SVC_SCRIPTS_VERSION'), 'r')
    version += '-scripts:{0}'.format(f.readline().strip())
    f.close()

    print('=== VERSIONS')
    print(version)

def parse_args():
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', ['timeout=',
                                                      'debug', 'no-slice'])
    except getopt.GetoptError as e:
        print('{0}'.format(str(e)))
        sys.exit(1)

    debug = False
    timeout=0
    slce = True

    for opt, arg in opts:
        if opt == '--debug':
            debug = True
        elif opt == '--timeout':
            timeout = int(arg)
        elif opt == '--no-slice':
            slce = False

    return (args, timeout, debug, slce)

def rmrf_tmp_dir(d):
    os.system('rm -rf {0}'.format(d))

def copy_source_to_tmp(src):
    # create temporary directory and copy sources there
    tmpdir = mkdtemp(prefix='symbiotic.', dir='.')
    atexit.register(rmrf_tmp_dir, tmpdir)
    basename = os.path.basename(src)

    if os.system('cp {0} {1}/{2}'.format(src, tmpdir, basename)) != 0:
        # cp already gave error message
        rmrf_tmp_dir(tmpdir)
        sys.exit(1)

    return '{0}/{1}'.format(tmpdir, basename)

if __name__ == "__main__":

    pths, timeout, debug, slce = parse_args()
    if len(pths) == 2:
        symbiotic_dir = pths[0]
        benchmark = pths[1]
    else:
        print('Usage: run_benchmark [--timeout=n] [--debug] [--no-slice] symbiotic_dir benchmark')
        sys.exit(1)

    printVersions(symbiotic_dir)

    start_timeout(timeout)

    src = copy_source_to_tmp(benchmark)

    print('=== RESULT')
    sys.stdout.flush()

    try:
        p = run_symbiotic(symbiotic_dir, src, debug, slce)
        (out, err) = p.communicate()

        if p.returncode != 0:
            print('ERROR')

        # these should be None ...
        if not out is None:
            print(out)
        if not err is None:
            print(err)

        sys.stdout.flush()
    except Timeout:
        print('TIMEOUT')
        sys.stdout.flush()

        printTimeConsumed()
        printMemoryUsage()

        # use this instead of p.kill(), because
        # p.kill() does not kill the klee for some
        # reason
        os.kill(0, signal.SIGTERM)
        sleep(1)
        os.kill(0, signal.SIGKILL)

    printTimeConsumed()
    printMemoryUsage()
