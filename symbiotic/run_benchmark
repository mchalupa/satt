#!/usr/bin/env python

import sys
import subprocess
import os
import atexit
import resource
import getopt
import signal
import datetime
import select
import fcntl

from time import sleep
from tempfile import mkdtemp

debug = False
timeout=0
slce = True
old_slicer = False
require_slicer = False
arch = None
prp = None
klee_params = None
pta = None
repeat_slicing = 1
no_symexe = False

class Timeout(Exception):
    pass

def start_timeout(sec):
    def alarm_handler(signum, data):
        raise Timeout

    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(sec)

def stop_timeout():
    # turn of timeout
    signal.signal(signal.SIGALRM, signal.SIG_DFL)
    signal.alarm(0)

def run_symbiotic(symbiotic_location, benchmark):
    cmd = ['{0}/symbiotic'.format(symbiotic_location)]
    if debug:
        cmd.append('--debug=all')

    if not prp is None:
       cmd.append('--prp={0}'.format(os.path.expanduser(prp)))

    if not slce:
        cmd.append('--no-slice')

    if arch == '64bit':
        cmd.append('--64')

    if timeout != 0:
        cmd.append('--timeout={0}'.format(timeout))

    if old_slicer:
        cmd.append('--old-slicer')

    if require_slicer:
        cmd.append('--require-slicer')

    if no_symexe:
        cmd.append('--no-symexe')

    #if repeat_slicing > 1:
    #    cmd.append('--repeat-slicing={0}'.format(repeat_slicing))

    #if optimize:
    #    cmd.append('--optimize=before-O2,after')

    # we run on sv-comp benchmarks where we assume that
    # malloc never fails
    cmd.append('--malloc-never-fails')
    if not pta is None:
        cmd.append('--pta')
        cmd.append(pta)

    benchabs = os.path.abspath(benchmark)
    witnessfile = '--witness={0}/{1}.graphml'.format(os.path.dirname(benchabs),
                                                     os.path.basename(benchmark))

    cmd.append(witnessfile)
    cmd.append(benchmark)

    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    return p

def verify_error_path_cpa(tmpdir, benchmark, prpfile, symbiotic_dir):
    benchabs = os.path.abspath(benchmark)
    witness = '{0}.graphml'.format(benchabs)
    cmd = ['scripts/cpa.sh',
           '-noout', '-heap', '10000M', '-predicateAnalysis',
           '-setprop', 'cfa.useMultiEdges=false',
           '-setprop', 'cpa.predicate.solver=MATHSAT5',
           '-setprop', 'cfa.simplifyCfa=false',
           '-setprop', 'cfa.allowBranchSwapping=false',
           '-setprop', 'cpa.predicate.ignoreIrrelevantVariables=false',
           '-setprop', 'counterexample.export.assumptions.assumeLinearArithmetics=true',
           '-setprop', 'coverage.enabled=false',
           '-setprop', 'coverage.mode=TRANSFER',
           '-setprop', 'coverage.export=true',
           '-setprop', 'analysis.traversal.byAutomatonVariable=__DISTANCE_TO_VIOLATION',
           '-setprop', 'cpa.automaton.treatErrorsAsTargets=false',
           '-setprop', 'WitnessAutomaton.cpa.automaton.treatErrorsAsTargets=true',
           '-setprop', 'parser.transformTokensToLines=false',
           '-setprop', 'spec.matchOriginLine=true',
           '-setprop', 'spec.matchOffset=true',
           '-setprop', 'spec.matchAssumeCase=true',
           '-setprop', 'spec.matchSourcecodeData=false',
           '-setprop', 'spec.strictMatching=false',
           '-setprop', 'cpa.composite.inCPAEnabledAnalysis=true',
           '-setprop', 'cpa.predicate.handlePointerAliasing=false',
           '-skipRecursion',
           '-spec', witness, '-spec', os.path.abspath(prpfile), benchabs]

    if arch == '64bit':
        cmd.append('-64')

    p = subprocess.Popen(cmd, shell=False, cwd='{0}/CPAchecker'.format(symbiotic_dir),
                         stderr=subprocess.STDOUT, stdout=subprocess.PIPE)

    return p

def verify_error_path_ultimate(tmpdir, benchmark, prpfile, symbiotic_dir):
    benchabs = os.path.abspath(benchmark)
    witness = '{0}.graphml'.format(benchabs)

    cmd = ['python3', 'UltimateWitnessChecker.py',
            os.path.abspath(prpfile), benchabs]

    if arch != '64bit':
        cmd.append('32bit')

    cmd += ['simple', os.path.abspath(witness)]

    p = subprocess.Popen(cmd, shell=False, cwd='{0}/UltimateAutomizer'.format(symbiotic_dir),
                         stderr=subprocess.STDOUT, stdout=subprocess.PIPE)

    return p

def print_witness(benchmark):
    benchabs = os.path.abspath(benchmark)
    path = '{0}/{1}.graphml'.format(os.path.dirname(benchabs),
                                    os.path.basename(benchmark))

    f = open(path, 'r')
    line = f.readline()
    while line:
        print(line.strip())
        line = f.readline()

    f.close()

def poll_add_fd(poll, fd):
    poll.register(fd, select.POLLIN | select.POLLERR | select.POLLHUP)

def cpa_confirmed(output):
    for l in output.splitlines():
        if 'Verification result: FALSE' in l:
            return True

    return False


def ultimate_confirmed(output):
    for l in output.splitlines():
        if l.strip() == 'FALSE':
            return True

    return False

def verify_error_path(tmpdir, benchmark, prpfile, symbiotic_dir):
    # run both checker paralelly
    cpa = verify_error_path_cpa(tmpdir, benchmark, prpfile, symbiotic_dir)
    ultimate = verify_error_path_ultimate(tmpdir, benchmark, prpfile, symbiotic_dir)
    cpa_fd = cpa.stdout.fileno()
    ultimate_fd = ultimate.stdout.fileno()

    # poll for results
    ## --
    poll = select.poll()
    poll_add_fd(poll, cpa_fd)
    poll_add_fd(poll, ultimate_fd)

    print('=== WITNESS')
    start_timeout(150)
    cpa_result = ''
    ultimate_result = ''
    got = 0
    confirmed = False
    try:
        while got < 2 and not confirmed:
            for fd, flags in poll.poll():
                if flags & select.POLLERR:
                    if fd == cpa_fd:
                        cpa_result = 'error'
                    else:
                        ultimate_result = 'error'

                if flags & select.POLLIN:
                    if fd == cpa_fd:
                        cpa_result, err = cpa.communicate()
                        got += 1
                        cpa = None
                        if cpa_confirmed(cpa_result):
                            confirmed = True
                    else:
                        ultimate_result, err = ultimate.communicate();
                        got += 1
                        ultimate = None
                        if ultimate_confirmed(ultimate_result):
                            confirmed = True

                    # err should be None
                    assert err is None

        stop_timeout()

        if (confirmed):
            print('confirmed')
        else:
            print('unconfirmed')

        print('=== WITNESS OUTPUT')
        print('--- CPAchecker output ---')
        print(cpa_result)
        print('--- UltimateAutomizer output ---')
        print(ultimate_result)
        print('--- witness ---')
        print_witness(benchmark)
    except Timeout:
        print('timeout')
    finally:
        stop_timeout()
        if cpa:
            cpa.terminate()
            cpa.kill()
        if ultimate:
            ultimate.terminate()
            ultimate.kill()

        sys.stdout.flush()

def printTimeConsumed():
    sys.stdout.flush()
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    usr = getattr(us, 'ru_utime')
    syst = getattr(us, 'ru_stime')

    print('=== TIME CONSUMED')
    print(usr + syst)
    sys.stdout.flush()


def printMemoryUsage():
    sys.stdout.flush()
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    maxrss = getattr(us, 'ru_maxrss')

    print('=== MEMORY USAGE')
    print(maxrss / 1024.0)
    sys.stdout.flush()

def printVersions(symbiotic_dir):
    version = ''

    f = open(os.path.join(symbiotic_dir, 'SYMBIOTIC_VERSION'), 'r')
    version += 'symb:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'LLVM_NEW_SLICER_VERSION'), 'r')
    version += '-slicer:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'SVC_SCRIPTS_VERSION'), 'r')
    version += '-scripts:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'KLEE_VERSION'), 'r')
    version += '-klee:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'MINISAT_VERSION'), 'r')
    version += '-minisat:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'STP_VERSION'), 'r')
    version += '-stp:{0}'.format(f.readline().strip())
    f.close()

    print('=== VERSIONS')
    print(version)
    sys.stdout.flush()

def parse_args():
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', ['timeout=',
                                                      'debug', 'no-slice',
                                                      '64', 'prp=', 'old-slicer',
                                                      'require-slicer', 'klee-params=',
                                                      'pta=', 'repeat-slicing=',
                                                      'no-symexe'])
    except getopt.GetoptError as e:
        print('{0}'.format(str(e)))
        sys.exit(1)

    for opt, arg in opts:
        if opt == '--debug':
            global debug
            debug = True
        elif opt == '--timeout':
            global timeout
            timeout = int(arg)
        elif opt == '--no-slice':
            global slce
            slce = False
        elif opt == '--require-slicer':
            global require_slicer
            require_slicer = False
        elif opt == '--64':
            global arch
            arch = '64bit'
        elif opt == '--old-slicer':
            global old_slicer
            old_slicer = True
        elif opt == '--no-symexe':
            global no_symexe
            no_symexe = True
        elif opt == '--prp':
            global prp
            prp = arg
        elif opt == '--pta':
            global pta
            pta = arg
        elif opt == '--repeat-slicing':
            global repeat_slicing
            repeat_slicing = int(arg)
        elif opt == '--klee-params':
            print('NOT IMPLEMENTED')
            sys.exit(1)
            global klee_params
            klee_params = arg

    return args

def say_result(res):
    print(res)
    return res

def say_time(msg):
    print('{0} at {1}'.format(msg, datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')))
    sys.stdout.flush()

def get_prp(prp):
    # if property is given in file, read the file
    epath = os.path.expanduser(prp)
    if os.path.isfile(epath):
        prp_list = []
        f = open(epath, 'r')
        for line in f.readlines():
            line = line.strip()
            # ignore empty lines
            if line:
                prp_list.append(line)
        f.close()
        return prp_list

    # it is not a file, so it is given as a string
    # FIXME: this does not work for properties given
    # as LTL (there are spaces)
    return prp.split()

if __name__ == "__main__":
    say_time('Starting')
    pths = parse_args()

    if len(pths) == 2:
        symbiotic_dir = pths[0]
        benchmark = pths[1]
    else:
        print('=== RESULT')
        print('ERROR')
        print('Usage: run_benchmark [--timeout=n] [--debug] [--no-slice]'
              '[--prp=property_file] [--64] [--klee-params=p] symbiotic_dir benchmark')
        sys.exit(1)

    printVersions(symbiotic_dir)

    src = os.path.abspath(benchmark)

    if prp is None:
        prp = '{0}/ALL.prp'.format(os.path.dirname(benchmark))

    print('=== RESULT')
    sys.stdout.flush()

    p = run_symbiotic(symbiotic_dir, src)
    out, err = p.communicate()

    result = None
    if p.returncode != 0:
        result = say_result('ERROR')
        print(out)
    else:
        if no_symexe:
            if out is None:
                say_result('ERROR')
            else:
                for l in iter(out.splitlines()):
                    if 'Did not find slicing criterion' in l:
                        result = say_result('TRUE')
                        break
                if result is None:
                    result = say_result('UNKNOWN')
        else:
            results = ['TRUE', 'UNKNOWN', 'ERROR', 'TIMEOUT']
            if not out is None:
                lnum = 0
                lmax = 100
                for line in iter(out.splitlines()):
                    if line == 'FALSE':
                        result = say_result(line)
                    elif line in results:
                        result = say_result(line)
                    else:
                        if lnum <= lmax:
                            print(line)
                            lnum += 1

                    sys.stdout.flush()
            else:
                result = say_result('ERROR')

    sys.stdout.flush()

    #say_time('Starting verifier')
    if result == 'FALSE':
        is_reach = 'CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )' in get_prp(prp)
        if is_reach:
            verify_error_path(tmpdir, src, prp, symbiotic_dir)
    elif result is None:
        print('Got no result')
        say_result('ERROR')

    printTimeConsumed()
    printMemoryUsage()
    say_time('Total end')

