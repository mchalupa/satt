#!/usr/bin/env python

import sys
import subprocess
import signal
import os
import atexit
import resource

class Timeout(Exception):
    pass

def start_timeout(sec):
    def alarm_handler(signum, data):
        raise Timeout

    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(sec)

def run_symbiotic(dir, file):
    path = os.path.dirname(sys.argv[0])
    p = subprocess.Popen(['{0}/run_on_benchmark.sh'.format(path), dir, file])
    return p

def printTimeConsumed():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    usr = getattr(us, 'ru_utime')
    syst = getattr(us, 'ru_stime')

    print('=== TIME CONSUMED')
    print(usr + syst)
    sys.stdout.flush()


def printMemoryUsage():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    maxrss = getattr(us, 'ru_maxrss')

    print('=== MEMORY USAGE')
    print(maxrss)
    sys.stdout.flush()

def printVersions(symbiotic_dir):
    version = ''
    f = open(os.path.join(symbiotic_dir, 'LLVM_SLICER_VERSION'), 'r')
    version += 'slicer:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'SVC_SCRIPTS_VERSION'), 'r')
    version += '-scripts:{0}'.format(f.readline().strip())
    f.close()

    print('=== VERSIONS')
    print(version)

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print('Usage: run_benchmark symbiotic_dir benchmark timeout')

    symbiotic_dir = sys.argv[1]
    benchmark = sys.argv[2]
    timeout = int(sys.argv[3])

    # kill all subprocesses if there are any on exit
    atexit.register(lambda: os.kill(0, signal.SIGKILL))

    printVersions(symbiotic_dir)

    start_timeout(timeout)

    print('=== RESULT')
    sys.stdout.flush()
    try:
        p = run_symbiotic(symbiotic_dir, benchmark)
        (out, err) = p.communicate()

        if p.returncode != 0:
            print('ERROR')

        # these should be None ...
        if not out is None:
            print(out)
        if not err is None:
            print(err)

        sys.stdout.flush()
    except Timeout:
        print('TIMEOUT')
        sys.stdout.flush()

        # use this instead of p.kill(), because
        # p.kill() does not kill the klee for some
        # reason
        os.kill(0, signal.SIGKILL)

    printTimeConsumed()
    printMemoryUsage()
