#!/usr/bin/env python

import sys
import subprocess
import os
import atexit
import resource
import getopt
import signal
import datetime
import select
import fcntl

from time import sleep
from tempfile import mkdtemp

class Timeout(Exception):
    pass

def start_timeout(sec):
    def alarm_handler(signum, data):
        raise Timeout

    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(sec)

def stop_timeout():
    # turn of timeout
    signal.signal(signal.SIGALRM, signal.SIG_DFL)
    signal.alarm(0)

#FIXME so many args, refactor!
def run_symbiotic(symbiotic_location, benchmark, timeout = 0, _debug = False,
                  slce = True, old_slicer = False, require_slicer = False,
                  prp = None, arch = None, klee_params = None):
    cmd = ['{0}/symbiotic'.format(symbiotic_location)]
    if _debug:
        cmd.append('--debug=slicer')
    cmd.append('--sv-comp')

    if not prp is None:
       cmd.append('--prp={0}'.format(os.path.expanduser(prp)))

    if not slce:
        cmd.append('--no-slice')

    if arch == '64bit':
        cmd.append('--64')

    if timeout != 0:
        cmd.append('--timeout={0}'.format(timeout))

    if old_slicer:
        cmd.append('--old-slicer')

    if require_slicer:
        cmd.append('--require-slicer')

    cmd.append(benchmark)

    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    return p

def verify_error_path_cpa(tmpdir, benchmark, prpfile, symbiotic_dir):
    benchabs = os.path.abspath(benchmark)
    cmd = ['./verify_path_cpa.sh {0} '
           '{1}/{2}.graphml {3} {4}'.format(symbiotic_dir,
                                            os.path.dirname(benchabs),
                                            os.path.basename(benchmark),
                                            os.path.abspath(prpfile), benchabs)]

    print(' '.join(cmd))
    p = subprocess.Popen(cmd, shell=True,
                         stderr=subprocess.STDOUT, stdout=subprocess.PIPE)

    return p

def verify_error_path_ultimate(tmpdir, benchmark, prpfile, symbiotic_dir):
    benchabs = os.path.abspath(benchmark)
    cmd = ['./verify_path_ultimate.sh {0} '
           '{1}/{2}.graphml {3} {4}'.format(symbiotic_dir,
                                            os.path.dirname(benchabs),
                                            os.path.basename(benchmark),
                                            os.path.abspath(prpfile), benchabs)]

    p = subprocess.Popen(cmd, shell=True,
                         stderr=subprocess.STDOUT, stdout=subprocess.PIPE)

    return p


def poll_add_fd(poll, fd):
    flags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, flags | os.O_NONBLOCK)
    poll.register(fd, select.POLLIN | select.POLLERR | select.POLLHUP)

def verify_error_path(tmpdir, benchmark, prpfile, symbiotic_dir):
    # run both checker paralelly
    cpa = verify_error_path_cpa(tmpdir, benchmark, prpfile, symbiotic_dir)
    ultimate = verify_error_path_ultimate(tmpdir, benchmark, prpfile, symbiotic_dir)
    cpa_fd = cpa.stdout.fileno()
    ultimate_fd = ultimate.stdout.fileno()

    # poll for results
    ## --
    poll = select.poll()
    poll_add_fd(poll, cpa_fd)
    poll_add_fd(poll, ultimate_fd)

    print('=== WITNESS')
    start_timeout(3)
    cpa_result = 'error'
    ultimate_result = 'error'
    got = 0
    confirmed = False
    try:
        while got < 2 and not confirmed:
            for fd, flags in poll.poll():
                if flags & select.POLLERR:
                    if fd == cpa_fd:
                        cpa_result = 'error'
                    else:
                        ultimate_result = 'error'

                if flags & select.POLLIN:
                    if fd == cpa_fd:
                        cpa_result, err = cpa.communicate()
                        got += 1
                        cpa = None
                        if cpa_result.startswith('confirmed'):
                            confirmed = True
                    else:
                        ultimate_result, err = ultimate.communicate();
                        got += 1
                        ultimate = None
                        if ultimate_result.startswith('confirmed'):
                            confirmed = True

                    # err should be None

        stop_timeout()

        if (confirmed):
            print('confirmed')
        elif cpa_result.startswith('unconfirmed') and ultimate_result.startswith('unconfirmed'):
            print('unconfirmed')
        else:
            print('error')

        print('=== WITNESS OUTPUT')
        print(cpa_result)
        print(ultimate_result)
    except Timeout:
        print('timeout')
        if cpa:
            cpa.kill()
        if ultimate:
            ultimate.kill()
    finally:
        stop_timeout()
        sys.stdout.flush()

def printTimeConsumed():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    usr = getattr(us, 'ru_utime')
    syst = getattr(us, 'ru_stime')

    print('=== TIME CONSUMED')
    print(usr + syst)
    sys.stdout.flush()


def printMemoryUsage():
    us = resource.getrusage(resource.RUSAGE_CHILDREN)
    maxrss = getattr(us, 'ru_maxrss')

    print('=== MEMORY USAGE')
    print(maxrss / 1024.0)
    sys.stdout.flush()

def printVersions(symbiotic_dir):
    version = ''

    f = open(os.path.join(symbiotic_dir, 'SYMBIOTIC_VERSION'), 'r')
    version += 'symb:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'LLVM_NEW_SLICER_VERSION'), 'r')
    version += '-slicer:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'SVC_SCRIPTS_VERSION'), 'r')
    version += '-scripts:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'KLEE_VERSION'), 'r')
    version += '-klee:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'MINISAT_VERSION'), 'r')
    version += '-minisat:{0}'.format(f.readline().strip())
    f.close()

    f = open(os.path.join(symbiotic_dir, 'STP_VERSION'), 'r')
    version += '-stp:{0}'.format(f.readline().strip())
    f.close()

    print('=== VERSIONS')
    print(version)

def parse_args():
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', ['timeout=',
                                                      'debug', 'no-slice',
                                                      '64', 'prp=', 'old-slicer',
                                                      'require-slicer', 'klee-params='])
    except getopt.GetoptError as e:
        print('{0}'.format(str(e)))
        sys.exit(1)

    debug = False
    timeout=0
    slce = True
    old_slicer = False
    req_slce = False
    arch = None
    prp = None
    klee_params = None

    for opt, arg in opts:
        if opt == '--debug':
            debug = True
        elif opt == '--timeout':
            timeout = int(arg)
        elif opt == '--no-slice':
            slce = False
        elif opt == '--require-slicer':
            req_slce = False
        elif opt == '--64':
            arch = '64bit'
        elif opt == '--old-slicer':
            old_slicer = True
        elif opt == '--prp':
            prp = arg
        elif opt == '--klee-params':
            print('NOT IMPLEMENTED')
            sys.exit(1)
            klee_params = arg

    return (args, timeout, debug, slce, old_slicer, req_slce, prp, arch, klee_params)

def rmrf_tmp_dir(d):
    return os.system('rm -rf {0}'.format(d))

def copy_source_to_tmp(src):
    # create temporary directory and copy sources there
    tmpdir = mkdtemp(prefix='symbiotic.', dir='.')
    basename = os.path.basename(src)

    if os.system('cp {0} {1}/{2}'.format(src, tmpdir, basename)) != 0:
        # cp already gave error message
        rmrf_tmp_dir(tmpdir)
        print('=== RESULT')
        print('ERROR')
        sys.exit(1)

    return (tmpdir, '{0}/{1}'.format(tmpdir, basename))

def say_result(res):
    print(res)
    return res

def say_time(msg):
    print('{0} at {1}'.format(msg, datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')))

if __name__ == "__main__":
    say_time('Starting')
    pths, timeout, debug, slce, old_slicer, require_slicer, prp, arch, klee_params = parse_args()
    if len(pths) == 2:
        symbiotic_dir = pths[0]
        benchmark = pths[1]
    else:
        print('=== RESULT')
        print('ERROR')
        print('Usage: run_benchmark [--timeout=n] [--debug] [--no-slice]'
              '[--prp=property_file] [--64] [--klee-params=p] symbiotic_dir benchmark')
        sys.exit(1)

    printVersions(symbiotic_dir)

    tmpdir, src = copy_source_to_tmp(benchmark)
    if prp is None:
        prp = '{0}/ALL.prp'.format(os.path.dirname(benchmark))

    print('=== RESULT')
    sys.stdout.flush()

    p = run_symbiotic(symbiotic_dir, src, timeout, debug,
                      slce, old_slicer, require_slicer, prp, arch, klee_params)
    out, err = p.communicate()
    say_time('Finished')

    result = None
    if p.returncode != 0:
        result = say_result('ERROR')
    else:
        results = ['TRUE', 'UNKNOWN', 'ERROR', 'TIMEOUT']
        if not out is None:
            lnum = 0
            lmax = 100
            for line in iter(out.splitlines()):
                if line == 'FALSE':
                    result = say_result(line)
                elif line in results:
                    result = say_result(line)
                else:
                    if lnum <= lmax:
                        print(line)
                        lnum += 1

                sys.stdout.flush()
        else:
            result = say_result('ERROR')

    sys.stdout.flush()

    say_time('Starting verifier')
    if result == 'FALSE':
        verify_error_path(tmpdir, src, prp, symbiotic_dir)
    elif result is None:
        print('Got no result')
        say_result('ERROR')

    printTimeConsumed()
    printMemoryUsage()
    say_time('Total end')
    rmrf_tmp_dir(tmpdir)

