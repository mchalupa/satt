#!/usr/bin/env python

import sys
import subprocess
import os
import atexit
import resource
import getopt
import signal
import datetime
import select
import fcntl

from time import sleep
from tempfile import mkdtemp
from collections import deque

debug = False
timeout=0
slce = True
old_slicer = False
require_slicer = False
arch = None
prp = None
prpfile = None
klee_params = None
pta = None
repeat_slicing = 1
no_symexe = False
optimize=None
runexec=True
exact_tool = None
disable_instr_plugins = False

running_processes = []

class Timeout(Exception):
    pass

def start_timeout(sec):
    def alarm_handler(signum, data):
        raise Timeout

    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(sec)

def stop_timeout():
    # turn of timeout
    signal.signal(signal.SIGALRM, signal.SIG_DFL)
    signal.alarm(0)

def set_ulimit(lim = 90):
    resource.setrlimit(resource.RLIMIT_CPU, (lim, lim))

class SymbioticRunner(object):
    def __init__(self, symbdir, tool = 'klee'):
        self._tool = tool
        self._dir = symbdir

    def _get_cmd(self, benchmark, outputfile):
        if runexec:
            cmd = ['runexec', '--no-container']#, '--cores=1']
            if timeout != 0:
                cmd += ['--timelimit={0}'.format(timeout)]
                        #'--walltimelimit={0}'.format(timeout)]
            cmd += ['--output={0}'.format(outputfile), '--']
        else:
            cmd = []

        cmd += ['{0}/bin/symbiotic'.format(self._dir)]
        if debug:
            cmd.append('--debug=all')

        if not prp is None:
           cmd.append('--prp={0}'.format(os.path.expanduser(prp)))

        if not prpfile is None:
           cmd.append('--prpfile={0}'.format(os.path.expanduser(prpfile)))

        if not slce:
            cmd.append('--no-slice')

        if arch == '32bit':
            cmd.append('--32')

        if timeout != 0 and not runexec:
            cmd.append('--timeout={0}'.format(timeout))

        if old_slicer:
            cmd.append('--old-slicer')

        if require_slicer:
            cmd.append('--require-slicer')

        if no_symexe:
            cmd.append('--no-symexe')

        if disable_instr_plugins:
            cmd.append('--disable-instr-plugins')

        #cmd.append('--verifier={0}'.format(self._tool))
        #cmd.append('--no-witness')

        if not pta is None:
            cmd.append('--pta')
            cmd.append(pta)

       #optimize='before-O3,after-O3'
       #if optimize:
       #    cmd.append('--optimize={0}'.format(optimize))

       #cmd.append('--malloc-never-fails')

        benchabs = os.path.abspath(benchmark)
        witnessfile = '--witness={0}.graphml'.format(benchabs)
        cmd.append(witnessfile)

        cmd.append(benchmark)

        return cmd

    def run(self, benchmark, outputfile):
        cmd = self._get_cmd(benchmark, outputfile)
        print(' '.join(cmd))

        if not runexec:
            outfl = open(outputfile, 'w')
        else:
            outfl = subprocess.PIPE

        p = subprocess.Popen(cmd, stdout=outfl, stderr=subprocess.STDOUT)
                             # force exit after the given limit
                             #preexec_fn = lambda: set_ulimit(timeout + 3))
        global running_processes
        running_processes.append(p)

        return p

def verify_error_path_cpa(benchmark, witness, outfile, prpfile, symbiotic_dir):
    benchabs = os.path.abspath(benchmark)
    prpfile = os.path.abspath(os.path.expanduser(prpfile))
    if runexec:
        cmd = ['runexec', '--no-container']#, '--cores=1']
        if timeout != 0:
            cmd += ['--timelimit={0}'.format(90)]#, '--softtimelimit={0}'.format(90)]
        cmd += ['--output={0}'.format(outfile), '--']
    else:
        cmd = []

    cmd += ['scripts/cpa.sh', '-config', 'config/witness-validation.properties',
            '-disable-java-assertions', '-heap', '10000m',
            '-setprop', 'cpa.arg.errorPath.graphml=violation-witness.graphml',
            '-spec', witness, '-timelimit', '90s',
            '-spec', prpfile, benchabs]

    if not runexec:
        outf = open(outfile, 'w')
    else:
        outf = subprocess.PIPE
    p = subprocess.Popen(cmd, shell=False, cwd='{0}/CPAchecker'.format(symbiotic_dir),
                         stderr=subprocess.STDOUT, stdout=outf)
    global running_processes
    running_processes.append(p)

    return p

def verify_error_path_ultimate(benchmark, witness, outfile, prpfile, symbiotic_dir):
    benchabs = os.path.abspath(benchmark)
    prpfile = os.path.abspath(os.path.expanduser(prpfile))
    if runexec:
        cmd = ['runexec', '--no-container']#, '--cores=1']
        if timeout != 0:
            cmd += ['--timelimit={0}'.format(90)]#, '--timelimit={0}'.format(93)]
        cmd += ['--output={0}'.format(outfile), '--']
    else:
        cmd = []

    cmd += ['python2', 'Ultimate.py', prpfile, '--validate', witness]
    if arch != '64bit':
        cmd.append('32bit')
    else:
        cmd.append('64bit')
    cmd.append(benchabs)

    if not runexec:
        outf = open(outfile, 'w')
    else:
        outf = subprocess.PIPE
    p = subprocess.Popen(cmd, shell=False, cwd='{0}/UltimateAutomizer'.format(symbiotic_dir),
                         stderr=subprocess.STDOUT, stdout=outf,
                         preexec_fn = set_ulimit) # ultimate does not seem to have it own timeout
    global running_processes
    running_processes.append(p)

    return p

def print_file(filename, first = 100, last = 100):
    'Return the first few lines and last few lines of a file'

    with open(filename) as f:
        counter = 0
        tail = deque(maxlen=last)
        for line in iter(f.readlines()):
            if counter < first:
                sys.stdout.write(line)
            else:
                tail.append(line)
            counter += 1

        cnt = counter - first - last
        if cnt >= 0:
            if cnt > 0:
                print(' ... {0} lines ...'.format(cnt))
            for line in tail:
                sys.stdout.write(line)

def print_witness(outputfile):
    benchabs = os.path.abspath(outputfile)
    pth = '{0}.graphml'.format(outputfile)

    print_file(pth)

def cpa_confirmed(output):
    with open(output) as f:
        for l in iter(f.readlines()):
            if 'Verification result: FALSE' in l:
                return True

    return False

def ultimate_confirmed(output):
    with open(output) as f:
        for l in iter(f.readlines()):
            if l.strip() == 'FALSE':
                return True

    return False

def verify_error_path(benchmark, witness, prpfile, symbiotic_dir):
    # run both checker paralelly
    cpa_outputfile = '{0}/CPAchecker/{1}.cpa.output'.format(symbiotic_dir, benchmark)
    ultimate_outputfile = '{0}/UltimateAutomizer/{1}.ultimate.output'.format(symbiotic_dir, benchmark)

    cpa = verify_error_path_cpa(benchmark, witness, cpa_outputfile,
                                prpfile, symbiotic_dir)
    ultimate = verify_error_path_ultimate(benchmark, witness, ultimate_outputfile,
                                          prpfile, symbiotic_dir)


    print('=== WITNESS')
    start_timeout(100)
    cpa_result = ''
    ultimate_result = ''
    got = 0
    confirmed = False
    global running_processes
    try:
        processes = [(cpa, cpa_confirmed, cpa_outputfile),
                     (ultimate, ultimate_confirmed, ultimate_outputfile)]
        while processes and not confirmed:
            for p, check, out in processes:
                retval = p.poll()
                if not retval is None:
                    if check(out):
                        confirmed = True
                    running_processes.remove(p)
                    processes.remove((p,check,out))
            sleep(1)

        stop_timeout()

        if (confirmed):
            print('confirmed')
        else:
            print('unconfirmed')

        print('=== WITNESS OUTPUT')
        print('--- witness ---')
        print_witness(benchmark)
        print('\n--- witness end ---')
        print('--- CPAchecker output ---')
        print_file(cpa_outputfile, 10, 50)
        print('--- UltimateAutomizer output ---')
        print_file(ultimate_outputfile, 10, 50)
    except Timeout:
        print('timeout')
    finally:
        stop_timeout()
        if cpa.poll() is None:
            cpa.terminate()
            cpa.kill()
            running_processes.remove(cpa)
        if ultimate.poll() is None:
            ultimate.terminate()
            ultimate.kill()
            running_processes.remove(ultimate)

        sys.stdout.flush()

def printVersions(symbiotic_dir):
    cmd = ['{0}/bin/symbiotic'.format(symbiotic_dir), '--version-short']
    p = subprocess.Popen(cmd, shell=False, cwd='{0}'.format(os.path.abspath(symbiotic_dir)),
                         stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
    out, err = p.communicate()
    assert err is None
    # set the symbiotic version
    version = out.strip()

    print('=== VERSIONS')
    print(version)
    sys.stdout.flush()

def get_prp(prp):
    src = 'https://raw.githubusercontent.com/sosy-lab/sv-benchmarks/master/c/{0}'.format(prp)
    if not os.path.isfile(prp):
        subprocess.call(['wget', '-q', src])
    return os.path.realpath(prp)

def parse_args():
    switches = ['timeout=', 'debug', 'no-slice', '32', 'prp=', 'cat=',
                'old-slicer', 'require-slicer', 'klee-params=', 'pta=',
                'repeat-slicing=', 'no-symexe', 'optimize=', 'no-runexec',
                'tool=', 'disable-instr-plugins']
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', switches)
    except getopt.GetoptError as e:
        print('{0}'.format(str(e)))
        sys.exit(1)

    global prp
    for opt, arg in opts:
        if opt == '--debug':
            global debug
            debug = True
        elif opt == '--timeout':
            global timeout
            timeout = int(arg)
        elif opt == '--no-slice':
            global slce
            slce = False
        elif opt == '--require-slicer':
            global require_slicer
            require_slicer = False
        elif opt == '--32':
            global arch
            arch = '32bit'
        elif opt == '--old-slicer':
            global old_slicer
            old_slicer = True
        elif opt == '--no-symexe':
            global no_symexe
            no_symexe = True
        elif opt == '--prp':
            prp = arg
        elif opt == '--tool':
            global exact_tool
            exact_tool = arg
        elif opt == '--cat':
            prp = arg
        elif opt == '--pta':
            global pta
            pta = arg
        elif opt == '--optimize':
            global optimize
            optimize = arg
        elif opt == '--repeat-slicing':
            global repeat_slicing
            repeat_slicing = int(arg)
        elif opt == '--klee-params':
            print('NOT IMPLEMENTED')
            sys.exit(1)
            global klee_params
            klee_params = arg
        elif opt == '--no-runexec':
            global runexec
            runexec = False
        elif opt == '--disable-instr-plugins':
            global disable_instr_plugins
            disable_instr_plugins = True

    return args

class Info(object):
    def __init__(self):
        self.result = None
        self.totalTime = None
        self.wallTime = None
        self.totalMem = None
        self.returncode = None
        self.slicingTime = None
        self.sliced = (None, None)

    def dump(self):
        a, b = self.sliced
        fmt =\
        "Result: {0}\n"\
        "IR reduced: to {1} from {2}\n"\
        "Slicing time: {3}\n"\
        "Total time: {4}\n"\
        "Wall  time: {5}\n"\
        "Total memory: {6}\n"\
        "Return code: {7}\n"\
        .format(self.result, b, a,
                self.slicingTime, self.totalTime,
                self.wallTime, self.totalMem,
                self.returncode)

        print(fmt)

    def dump_oneline(self):
        a, b = self.sliced
        fmt =\
        "Result/ir_size/sl.time/time/walltime/mem: {0} {1}/{2} {3} {4} {5} {6}"\
        .format(self.result, b, a,
                self.slicingTime, self.totalTime,
                self.wallTime, self.totalMem)

        print(fmt)

def parse_outputfile(outputfile, info = None):
    results = ['false', 'true', 'unknown', 'timeout', 'ERROR']

    if info is None:
        info = Info()
    with open(outputfile, 'r') as outf:
        for line in outf:
            if line.startswith('RESULT:'):
                for r in results:
                    if line[8:].startswith(r):
                        info.result = r.upper()
            elif line.startswith('Statistics before'):
                a, b = info.sliced
                a = int(line[line.rfind(' '):])
                info.sliced = (a, b)
            elif line.startswith('Statistics after'):
                a, b = info.sliced
                b = int(line[line.rfind(' '):])
                info.sliced = (a, b)
            elif line.startswith('INFO: Total slicing time:'):
                info.slicingTime = float(line[26:])

        # this one we take from the runexec if available
        if not runexec:
            if line.startswith('INFO: Total time elapsed:'):
                     info.totalTime = info.wallTime = float(line[26:])

        return info

def parse_output(output, info = None):
    """
    Search for these lines:

    terminationreason=cputime
    returnvalue=1
    walltime=0.15458901800047897s
    cputime=0.140842407s
    memory=7090176
    """

    if info is None:
        info = Info()

    results = ['false', 'true', 'unknown', 'timeout', 'error']
    for line in iter(output.splitlines()):
        if line.startswith('returnvalue='):
            info.returncode = int(line[12:])
        elif line.startswith('walltime='):
            info.wallTime = float(line[9:-1])
        elif line.startswith('cputime='):
            info.totalTime = float(line[8:-1])
        elif line.startswith('memory='):
            info.totalMem = int(line[7:])
        elif line.startswith('terminationreason=cputime'):
            info.result = 'TIMEOUT'

    return info

def run_symbiotic(src, tool_name = 'klee'):
    outputfile = './{0}.output'.format(os.path.basename(src))
    symbiotic = SymbioticRunner(os.path.abspath('symbiotic'), tool_name)
    p = symbiotic.run(src, outputfile)

    output, err = p.communicate()
    running_processes.remove(p)
    info = None

    assert err is None
    if p.returncode == 0:
        info = parse_output(output)
        is_timeout = info.result == 'TIMEOUT'
        if info.returncode == 0:
            info = parse_outputfile(outputfile, info)
            if is_timeout:
                info.result = 'TIMEOUT'
        elif not is_timeout:
            info.result = 'ERROR'

        print_file(outputfile)
        # let the result be None only when benchexec fails
        # (so that the benchmark gets a new try)
        if info.result is None:
            info.result = 'ERROR'
    else:
        print(output)
        print(err)
        print('Running benchexec failed')

    return info, outputfile

def sigpipe_handler(signum, data):
    global running_processes
    for p in running_processes:
        p.kill() # try sending SIGINT twice first
                 # that is how KLEE can be killed by an user
        p.terminate()
        p.kill()

def get_benchmark(bench):
    name = bench[bench.rfind('/', 0, bench.rfind('/')):]
    src = 'https://raw.githubusercontent.com/sosy-lab/sv-benchmarks/master/c{0}'.format(name)
    retname = os.path.relpath(os.path.basename(name))

    if not os.path.isfile(retname):
        ret = subprocess.call(['wget', '-q', src])
        assert ret == 0

    return retname

def run_on_tool(src, tool):
    info, outputfile = run_symbiotic(src, tool)
    if info is None:
        no_info = Info()
        no_info.result = 'ERROR'
        info = no_info

    sys.stdout.write('Summary:: {0:7} : '.format(tool))
    info.dump_oneline();

    return info

def move_symbiotic(path, tmpdir):
    """
    Move symbiotic into a tmp directory (if it is not there yet)
    so that we do not create too much trafic on NFS
    """
    symbdir = '{0}/symbiotic'.format(tmpdir)
    if not os.path.isdir(symbdir):
        cmd = ['cp', '-r', path, symbdir]
        ret = subprocess.call(cmd)
        assert ret == 0

    assert os.path.isfile('{0}/bin/symbiotic'.format(symbdir))
    return symbdir

def setup_benchexec():
    files = ['/sys/fs/cgroup/cpuset/system.slice/benchexec-cgroup.service/tasks',
             '/sys/fs/cgroup/cpuacct/system.slice/benchexec-cgroup.service/tasks',
             '/sys/fs/cgroup/memory/system.slice/benchexec-cgroup.service/tasks',
             '/sys/fs/cgroup/freezer/system.slice/benchexec-cgroup.service/tasks']
    for f in files:
        fw = open(f, 'a')
        fw.write('{0}\n'.format(os.getpid()))
        fw.close()

def download_prp(arg):
    global prp
    # for SMACK and CEAGLE
    #global prpfile
    #prpfile = get_prp("PropertyUnreachCall.prp")

    if 'Reach' in arg:
        prp = get_prp("PropertyUnreachCall.prp")
    elif 'Overflow' in arg:
        prp = get_prp("PropertyNoOverflow.prp")
    elif 'MemSafety' in arg:
        prp = get_prp("PropertyMemSafety.prp")
    elif 'Termination' in arg:
        prp = get_prp("PropertyTermination.prp")
    elif 'DefBehavior' in arg:
        prp = get_prp("PropertyDefBehavior.prp")
    else:
        print('UNKNOWN_PROPERTY')
        sys.exit(1)

if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, sigpipe_handler)
    signal.signal(signal.SIGINT, sigpipe_handler)

    pths = parse_args()

    setup_benchexec()

    tmpdir = '/var/tmp/symbiotic-{0}'.format(os.getenv('USER'))
    if not os.path.isdir(tmpdir):
        os.mkdir(tmpdir)

    if len(pths) == 2:
        symbiotic_dir = move_symbiotic(os.path.abspath(pths[0]), tmpdir)
        assert os.path.isfile('{0}/bin/symbiotic'.format(symbiotic_dir))
        benchmark = pths[1]
    else:
        print('=== RESULT')
        print('ERROR')
        print('Usage: run_benchmark [--timeout=n] [--debug] [--no-slice]'
              '[--prp=property_file] [--32] [--klee-params=p] symbiotic_dir benchmark')
        sys.exit(1)

    os.chdir(tmpdir)

    printVersions(symbiotic_dir)
    download_prp(prp)
    src = get_benchmark(benchmark)

    # kill the processes for sure after some time
    # (klee sometimes ignores signals)
    if timeout:
        set_ulimit(5*timeout)

    print('=== OUTPUT')

    if exact_tool:
        tools = [exact_tool]
    else:
        tools = ['klee', 'ceagle', 'smack', 'skink', 'seahorn']

    total_time = 0.0
    for tool in tools:
        info = run_on_tool(src, tool)
        if not info.wallTime is None:
            total_time += info.wallTime

    #print(' -- no slicing -- ')
    #slce = False
    #
    #for tool in tools:
    #    info = run_on_tool(tool)
    #    if not info.wallTime is None:
    #        total_time += info.wallTime

    sys.stdout.flush()
    print('=== RESULT')
    print(info.result)

    print('=== TIME CONSUMED')
    print(total_time)

    if info.result == 'FALSE':
        witness = '{0}.graphml'.format(os.path.abspath(src))
        verify_error_path(src, witness, prp, symbiotic_dir)

    # remove the downloaded benchmark
    #os.unlink(src)

