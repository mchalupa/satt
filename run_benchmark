#!/usr/bin/env python

import sys
import subprocess
import signal
import os
import atexit

class Timeout(Exception):
    pass

def start_timeout(sec):
    def alarm_handler(signum, data):
        raise Timeout

    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(sec)

def run_symbiotic(dir, file):
    path = os.path.dirname(sys.argv[0])
    p = subprocess.Popen(['{0}/run_on_benchmark.sh'.format(path), dir, file])
    return p

if __name__ == "__main__":
    symbiotic_dir = sys.argv[1]
    benchmark = sys.argv[2]
    timeout = int(sys.argv[3])

    # kill all subprocesses if there are any on exit
    atexit.register(lambda: os.kill(0, signal.SIGKILL))

    start_timeout(timeout)

    try:
        p = run_symbiotic(symbiotic_dir, benchmark)

        (out, err) = p.communicate()

        print('=== RESULT')

        if p.returncode != 0:
            print('ERROR')

        print(out)
        print(err)
    except Timeout:
        print('TIMEOUT')
        # use this instead of p.kill(), because
        # p.kill() does not kill the klee for some
        # reason
        os.kill(0, signal.SIGKILL)
